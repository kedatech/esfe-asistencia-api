generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./generate"
}

model User {
  id       String   @id @default(uuid())
  name     String   @db.VarChar(255)
  email    String   @unique
  photo    String?  @default("default.png")
  verified Boolean? @default(false)

  password String
  role     RoleEnumType? @default(user)

  verificationCode String? @unique @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map(name: "users")
}

enum RoleEnumType {
  user
  admin
}

// sys asistencia y sys horario 
// eh comentado las tablas de datos que consumire de otra api
// model Docente {
//   id        Int      @id @default(autoincrement())
//   // fullName     String
//   // academicLoad Int
//   // id en la api esfe
//   esfeId    Int      @unique
//   huellaId  Int?     @unique
//   Huella    Huella?  @relation(fields: [huellaId], references: [id])
//   createdAt DateTime
//   clase     Clase[]
// }

model Espacio {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  capacity      Int
  espacioTypeId Int
  espacioType   EspacioType @relation(fields: [espacioTypeId], references: [id])
  createdAt     DateTime    @default(now())
  clase         Clase[]
}

model EspacioType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  espacio Espacio[]
}

model Duracion {
  id        Int      @id @default(autoincrement())
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  createdAt DateTime @default(now())
  clase     Clase[]

  @@unique([startTime, endTime])
  @@index([startTime, endTime])
}

model Dia {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  clase     Clase[]
}

model CicloClase {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  clase     Clase[]
}

// model Modulo {
//   id        Int      @id @default(autoincrement())
//   name      String
//   tipo      String
//   createdAt DateTime
//   clase     Clase[]
// }

// model Turno {
//   id         Int      @id @default(autoincrement())
//   horaInicio DateTime
//   horaFin    DateTime
//   createdAt  DateTime
//   // grupo      Grupo[]
// }

// model Grupo {
//   id               Int          @id @default(autoincrement())
//   name             String
//   numberOfStudents Int
//   turnoId          Int
//   createdAt        DateTime
//   turno            Turno        @relation(fields: [turnoId], references: [id])
//   // estudiante       Estudiante[]
//   clase            Clase[]
// }

model Clase {
  id         Int        @id @default(autoincrement())
  cicloId    Int
  ciclo      CicloClase @relation(fields: [cicloId], references: [id])
  espacioId  Int
  espacio    Espacio    @relation(fields: [espacioId], references: [id])
  duracionId Int
  duracion   Duracion   @relation(fields: [duracionId], references: [id])
  diaId      Int
  dia        Dia        @relation(fields: [diaId], references: [id])
  docenteId  Int
  // docente    Docente    @relation(fields: [docenteId], references: [id])
  grupoId    Int
  // grupo      Grupo      @relation(fields: [grupoId], references: [id])
  moduloId   Int
  // modulo     Modulo     @relation(fields: [moduloId], references: [id])
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime   @default(now())

  // RESTRICCIONES
  // no existiran dos clases iguales
  @@unique([cicloId, espacioId, duracionId, diaId, docenteId, grupoId, moduloId])
  // no existiran dos que se sobrepongan 
  @@unique([cicloId, espacioId, duracionId, diaId])
  @@index([cicloId, espacioId, duracionId, diaId, docenteId, grupoId, moduloId])
  @@index([cicloId, espacioId, duracionId, diaId])
}

// model Estudiante {
//   id         Int          @id @default(autoincrement())
//   esfeId     Int
//   // grupoId    Int
//   // grupo      Grupo        @relation(fields: [grupoId], references: [id])
//   huellaId   Int?         @unique
//   huella     Huella?      @relation(fields: [huellaId], references: [id])
//   asistencia Asistencia[]
// }

model Rfid {
  id           Int    @id @default(autoincrement())
  uid          String
  estudianteId Int

  @@unique([estudianteId, uid])
  @@index([estudianteId, id])
}

// model Rol {
//   id     Int      @id @default(autoincrement())
//   name   String   @unique
//   huella Rfid[]
// }

model Asistencia {
  id             Int          @id @default(autoincrement())
  estudianteId   Int
  fecha          DateTime
  nomenclaturaId Int
  criterioId     Int
  // estudiante     Estudiante   @relation(fields: [estudianteId], references: [id])
  nomenclatura   Nomenclatura @relation(fields: [nomenclaturaId], references: [id])
  criterio       Criterio     @relation(fields: [criterioId], references: [id])
  createAt       DateTime     @default(now())
}

model Nomenclatura {
  id         Int          @id @default(autoincrement())
  letra      String       @unique
  concepto   String
  asistencia Asistencia[]
}

model Criterio {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  descripcion String
  asistencia  Asistencia[]
}
